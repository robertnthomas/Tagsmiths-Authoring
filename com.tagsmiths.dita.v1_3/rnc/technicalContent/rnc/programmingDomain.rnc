# 
# =============================================================
#                    HEADER                                    
# =============================================================
#  MODULE:    DITA Programming Domain                     
#  VERSION:   1.2                                              
#  DATE:      November 2009                                    
#                                                              
# =============================================================
# 
# =============================================================
#                    PUBLIC DOCUMENT TYPE DEFINITION           
#                    TYPICAL INVOCATION                        
#                                                              
#  Refer to this file by the following public identifier or an 
#       appropriate system identifier 
# PUBLIC "-//OASIS//ELEMENTS DITA Programming Domain//EN"
#       Delivered as file "programmingDomain.mod"                   
# 
# =============================================================
# SYSTEM:     Darwin Information Typing Architecture (DITA)    
#                                                              
# PURPOSE:    Declaring the elements and specialization        
#             attributes for the Programming Domain            
#                                                              
# ORIGINAL CREATION DATE:                                      
#             March 2001                                       
#                                                              
#             (C) Copyright OASIS Open 2005, 2009.             
#             (C) Copyright IBM Corporation 2001, 2004.        
#             All Rights Reserved.                             
#                                                              
#  UPDATES:                                                    
#    2005.11.15 RDA: Updated these comments to match template  
#    2005.11.15 RDA: Corrected Long Names for syntax groups,   
#                    codeph, and kwd                           
#    2005.11.15 RDA: Corrected the "Delivered as" system ID    
#    2006.06.07 RDA: Make universal attributes universal       
#                      (DITA 1.1 proposal #12)                 
#    2006.11.30 RDA: Add -dita-use-conref-target to enumerated 
#                      attributes                              
#    2007.12.01 EK:  Reformatted DTD modules for DITA 1.2       
#    2008.02.12 RDA: Add text to synph, items with only #PCDATA
#    2008.02.12 RDA: Add coderef element                       
#    2008.02.13 RDA: Create .content and .attributes entities  
# =============================================================
# 
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace dita = "http://dita.oasis-open.org/architecture/2005/"

pr-d-ph = (codeph.element | synph.element)
pr-d-pre = codeblock.element
pr-d-keyword = (apiname.element | option.element | parmname.element)
pr-d-fig = syntaxdiagram.element
pr-d-dl = parml.element
ph |= pr-d-ph
pre |= pr-d-pre
keyword |= pr-d-keyword
fig |= pr-d-fig
dl |= pr-d-dl
codeph = codeph.element
coderef = coderef.element
delim = delim.element
kwd = kwd.element
oper = oper.element
option = option.element
parmname = parmname.element
sep = sep.element
synph = synph.element
var = var.element
pd = pd.element
plentry = plentry.element
pt = pt.element
fragment = fragment.element
fragref = fragref.element
groupchoice = groupchoice.element
groupcomp = groupcomp.element
groupseq = groupseq.element
repsep = repsep.element
synblk = synblk.element
synnote = synnote.element
synnoteref = synnoteref.element
univ-atts-no-importance = 
attribute base { text}?, base-attribute-extensions, id-atts, filter-atts, localization-atts, 
attribute rev { text}?, 
attribute status {("new" | "changed" | "deleted" | "unchanged" | "-dita-use-conref-target")}?
codeph.content = ( text  | basic.ph.notm | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup)*
codeph.attributes = univ-atts, 
attribute outputclass { text}?
codeph.element = 
element codeph {codeph.attlist, codeph.content}
codeph.attlist &= codeph.attributes
codeblock.content = ( text  | basic.ph.notm | coderef | data.elements.incl | foreign.unknown.incl | txt.incl)*
codeblock.attributes = display-atts, 
attribute spectitle { text}?, 
attribute xml:space {"preserve"}?, univ-atts, 
attribute outputclass { text}?
codeblock.element = 
element codeblock {codeblock.attlist, codeblock.content}
codeblock.attlist &= codeblock.attributes
coderef.content =  empty 
coderef.attributes = 
attribute href { text}?, 
attribute keyref { text}?, 
attribute type { text}?, 
attribute format { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
coderef.element = 
element coderef {coderef.attlist, coderef.content}
coderef.attlist &= coderef.attributes
option.content = ( text  | \text)*
option.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
option.element = 
element option {option.attlist, option.content}
option.attlist &= option.attributes
var.content = words.cnt*
var.attributes = 
attribute importance {("default" | "optional" | "required" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
var.element = 
element var {var.attlist, var.content}
var.attlist &= var.attributes
parmname.content = ( text  | \text)*
parmname.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
parmname.element = 
element parmname {parmname.attlist, parmname.content}
parmname.attlist &= parmname.attributes
synph.content = ( text  | codeph | delim | kwd | oper | option | parmname | sep | synph | \text | var)*
synph.attributes = univ-atts, 
attribute outputclass { text}?
synph.element = 
element synph {synph.attlist, synph.content}
synph.attlist &= synph.attributes
oper.content = words.cnt*
oper.attributes = 
attribute importance {("default" | "optional" | "required" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
oper.element = 
element oper {oper.attlist, oper.content}
oper.attlist &= oper.attributes
delim.content = words.cnt*
delim.attributes = 
attribute importance {("optional" | "required" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
delim.element = 
element delim {delim.attlist, delim.content}
delim.attlist &= delim.attributes
sep.content = words.cnt*
sep.attributes = 
attribute importance {("optional" | "required" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
sep.element = 
element sep {sep.attlist, sep.content}
sep.attlist &= sep.attributes
apiname.content = ( text  | \text)*
apiname.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
apiname.element = 
element apiname {apiname.attlist, apiname.content}
apiname.attlist &= apiname.attributes
parml.content = (data | data-about)*, plentry+
parml.attributes = 
attribute compact {("yes" | "no" | "-dita-use-conref-target")}?, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
parml.element = 
element parml {parml.attlist, parml.content}
parml.attlist &= parml.attributes
plentry.content = pt+, pd+
plentry.attributes = univ-atts, 
attribute outputclass { text}?
plentry.element = 
element plentry {plentry.attlist, plentry.content}
plentry.attlist &= plentry.attributes
pt.content = term.cnt*
pt.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
pt.element = 
element pt {pt.attlist, pt.content}
pt.attlist &= pt.attributes
pd.content = defn.cnt*
pd.attributes = univ-atts, 
attribute outputclass { text}?
pd.element = 
element pd {pd.attlist, pd.content}
pd.attlist &= pd.attributes
syntaxdiagram.content = title?, (fragment | fragref | groupchoice | groupcomp | groupseq | synblk | synnote | synnoteref)*
syntaxdiagram.attributes = display-atts, univ-atts, 
attribute outputclass { text}?
syntaxdiagram.element = 
element syntaxdiagram {syntaxdiagram.attlist, syntaxdiagram.content}
syntaxdiagram.attlist &= syntaxdiagram.attributes
synblk.content = title?, (fragment | fragref | groupchoice | groupcomp | groupseq | synnote | synnoteref)*
synblk.attributes = univ-atts, 
attribute outputclass { text}?
synblk.element = 
element synblk {synblk.attlist, synblk.content}
synblk.attlist &= synblk.attributes
groupseq.content = title?, repsep?, (delim | fragref | groupchoice | groupcomp | groupseq | kwd | oper | sep | synnote | synnoteref | var)*
groupseq.attributes = 
attribute importance {("default" | "required" | "optional" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
groupseq.element = 
element groupseq {groupseq.attlist, groupseq.content}
groupseq.attlist &= groupseq.attributes
groupchoice.content = title?, repsep?, (delim | fragref | groupchoice | groupcomp | groupseq | kwd | oper | sep | synnote | synnoteref | var)*
groupchoice.attributes = 
attribute importance {("default" | "required" | "optional" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
groupchoice.element = 
element groupchoice {groupchoice.attlist, groupchoice.content}
groupchoice.attlist &= groupchoice.attributes
groupcomp.content = title?, repsep?, (delim | fragref | groupchoice | groupcomp | groupseq | kwd | oper | sep | synnote | synnoteref | var)*
groupcomp.attributes = 
attribute importance {("default" | "required" | "optional" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
groupcomp.element = 
element groupcomp {groupcomp.attlist, groupcomp.content}
groupcomp.attlist &= groupcomp.attributes
fragment.content = title?, (fragref | groupchoice | groupcomp | groupseq | synnote | synnoteref)*
fragment.attributes = univ-atts, 
attribute outputclass { text}?
fragment.element = 
element fragment {fragment.attlist, fragment.content}
fragment.attlist &= fragment.attributes
fragref.content = xrefph.cnt*
fragref.attributes = 
attribute href { text}?, 
attribute importance {("optional" | "required" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
fragref.element = 
element fragref {fragref.attlist, fragref.content}
fragref.attlist &= fragref.attributes
synnote.content = ( text  | basic.ph)*
synnote.attributes = 
attribute callout { text}?, univ-atts, 
attribute outputclass { text}?
synnote.element = 
element synnote {synnote.attlist, synnote.content}
synnote.attlist &= synnote.attributes
synnoteref.content =  empty 
synnoteref.attributes = 
attribute href { text}?, univ-atts, 
attribute outputclass { text}?
synnoteref.element = 
element synnoteref {synnoteref.attlist, synnoteref.content}
synnoteref.attlist &= synnoteref.attributes
repsep.content = words.cnt*
repsep.attributes = 
attribute importance {("optional" | "required" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
repsep.element = 
element repsep {repsep.attlist, repsep.content}
repsep.attlist &= repsep.attributes
kwd.content = ( text  | \text)*
kwd.attributes = 
attribute keyref { text}?, 
attribute importance {("default" | "required" | "optional" | "-dita-use-conref-target")}?, univ-atts-no-importance, 
attribute outputclass { text}?
kwd.element = 
element kwd {kwd.attlist, kwd.content}
kwd.attlist &= kwd.attributes
apiname.attlist &= global-atts, 
attribute class { text}?
codeblock.attlist &= global-atts, 
attribute class { text}?
codeph.attlist &= global-atts, 
attribute class { text}?
coderef.attlist &= global-atts, 
attribute class { text}?
delim.attlist &= global-atts, 
attribute class { text}?
fragment.attlist &= global-atts, 
attribute class { text}?
fragref.attlist &= global-atts, 
attribute class { text}?
groupchoice.attlist &= global-atts, 
attribute class { text}?
groupcomp.attlist &= global-atts, 
attribute class { text}?
groupseq.attlist &= global-atts, 
attribute class { text}?
kwd.attlist &= global-atts, 
attribute class { text}?
oper.attlist &= global-atts, 
attribute class { text}?
option.attlist &= global-atts, 
attribute class { text}?
parml.attlist &= global-atts, 
attribute class { text}?
parmname.attlist &= global-atts, 
attribute class { text}?
pd.attlist &= global-atts, 
attribute class { text}?
plentry.attlist &= global-atts, 
attribute class { text}?
pt.attlist &= global-atts, 
attribute class { text}?
repsep.attlist &= global-atts, 
attribute class { text}?
sep.attlist &= global-atts, 
attribute class { text}?
synblk.attlist &= global-atts, 
attribute class { text}?
synnote.attlist &= global-atts, 
attribute class { text}?
synnoteref.attlist &= global-atts, 
attribute class { text}?
synph.attlist &= global-atts, 
attribute class { text}?
syntaxdiagram.attlist &= global-atts, 
attribute class { text}?
var.attlist &= global-atts, 
attribute class { text}?