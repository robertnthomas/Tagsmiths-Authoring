# 
# =============================================================
#                    HEADER                                    
# =============================================================
#  MODULE:    DITA Glossary                                    
#  VERSION:   1.2                                              
#  DATE:      November 2009                                    
#                                                              
# =============================================================
# 
# =============================================================
#                    PUBLIC DOCUMENT TYPE DEFINITION           
#                    TYPICAL INVOCATION                        
#                                                              
#  Refer to this file by the following public identifier or an 
#       appropriate system identifier 
# PUBLIC "-//OASIS//ELEMENTS DITA Glossary Entry//EN"
#       Delivered as file "glossentry.mod"                            
# 
# =============================================================
# SYSTEM:     Darwin Information Typing Architecture (DITA)    
#                                                              
# PURPOSE:    Define elements and specialization atttributes   
#             for Glossary topics                              
#                                                              
# ORIGINAL CREATION DATE:                                      
#             June 2006                                        
#                                                              
#             (C) Copyright OASIS Open 2006, 2009.             
#             All Rights Reserved.                             
#                                                              
#  UPDATES:                                                    
#    2007.12.01 EK:  Reformatted DTD modules for DITA 1.2       
#    2008.01.30 RDA: Replace @conref defn. with %conref-atts;  
#    2008.02.12 RDA: Expand glossary for DITA 1.2               
#    2008.02.13 RDA: Create .content and .attributes entities  
#    2009.09.21 WEK: Renamed glossentry.mod                    
# =============================================================
#    
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace dita = "http://dita.oasis-open.org/architecture/2005/"

glossentry-info-types |=  empty 
glossAbbreviation = glossAbbreviation.element
glossAcronym = glossAcronym.element
glossAlt = glossAlt.element
glossAlternateFor = glossAlternateFor.element
glossBody = glossBody.element
glossdef = glossdef.element
glossPartOfSpeech = glossPartOfSpeech.element
glossProperty = glossProperty.element
glossScopeNote = glossScopeNote.element
glossShortForm = glossShortForm.element
glossStatus = glossStatus.element
glossSurfaceForm = glossSurfaceForm.element
glossSymbol = glossSymbol.element
glossSynonym = glossSynonym.element
glossterm = glossterm.element
glossUsage = glossUsage.element
glossentry.content = glossterm, glossdef?, prolog?, glossBody?, related-links?, glossentry-info-types*
glossentry.attributes = 
attribute id { xsd:ID}, conref-atts, select-atts, localization-atts, 
attribute outputclass { text}?
glossentry.element = 
element glossentry {glossentry.attlist, glossentry.content}
glossentry.attlist &= glossentry.attributes, arch-atts, domains-att
glossterm.content = title.cnt*
glossterm.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?
glossterm.element = 
element glossterm {glossterm.attlist, glossterm.content}
glossterm.attlist &= glossterm.attributes
glossdef.content = abstract.cnt*
glossdef.attributes = univ-atts, 
attribute outputclass { text}?
glossdef.element = 
element glossdef {glossdef.attlist, glossdef.content}
glossdef.attlist &= glossdef.attributes
glossBody.content = glossPartOfSpeech?, glossStatus?, glossProperty*, glossSurfaceForm?, glossUsage?, glossScopeNote?, glossSymbol*, note*, glossAlt*
glossBody.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?
glossBody.element = 
element glossBody {glossBody.attlist, glossBody.content}
glossBody.attlist &= glossBody.attributes
glossAbbreviation.content = ( text  | keyword | term | \text | tm)*
glossAbbreviation.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?
glossAbbreviation.element = 
element glossAbbreviation {glossAbbreviation.attlist, glossAbbreviation.content}
glossAbbreviation.attlist &= glossAbbreviation.attributes
glossAcronym.content = ( text  | keyword | term | \text | tm)*
glossAcronym.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?
glossAcronym.element = 
element glossAcronym {glossAcronym.attlist, glossAcronym.content}
glossAcronym.attlist &= glossAcronym.attributes
glossShortForm.content = ( text  | keyword | term | \text | tm)*
glossShortForm.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?
glossShortForm.element = 
element glossShortForm {glossShortForm.attlist, glossShortForm.content}
glossShortForm.attlist &= glossShortForm.attributes
glossSynonym.content = ( text  | keyword | term | \text | tm)*
glossSynonym.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?
glossSynonym.element = 
element glossSynonym {glossSynonym.attlist, glossSynonym.content}
glossSynonym.attlist &= glossSynonym.attributes
glossPartOfSpeech.content =  empty 
glossPartOfSpeech.attributes = data-element-atts
glossPartOfSpeech.element = 
element glossPartOfSpeech {glossPartOfSpeech.attlist, glossPartOfSpeech.content}
glossPartOfSpeech.attlist &= glossPartOfSpeech.attributes
glossStatus.content =  empty 
glossStatus.attributes = data-element-atts
glossStatus.element = 
element glossStatus {glossStatus.attlist, glossStatus.content}
glossStatus.attlist &= glossStatus.attributes
glossProperty.content = data.cnt*
glossProperty.attributes = data-element-atts
glossProperty.element = 
element glossProperty {glossProperty.attlist, glossProperty.content}
glossProperty.attlist &= glossProperty.attributes
glossSurfaceForm.content = ( text  | keyword | term | \text | tm)*
glossSurfaceForm.attributes = univ-atts, 
attribute outputclass { text}?
glossSurfaceForm.element = 
element glossSurfaceForm {glossSurfaceForm.attlist, glossSurfaceForm.content}
glossSurfaceForm.attlist &= glossSurfaceForm.attributes
glossUsage.content = note.cnt*
glossUsage.attributes = 
attribute type {("attention" | "caution" | "danger" | "fastpath" | "important" | "note" | "notice" | "other" | "remember" | "restriction" | "tip" | "warning" | "-dita-use-conref-target")}?, 
attribute othertype { text}?, univ-atts, 
attribute outputclass { text}?
glossUsage.element = 
element glossUsage {glossUsage.attlist, glossUsage.content}
glossUsage.attlist &= glossUsage.attributes
glossScopeNote.content = note.cnt*
glossScopeNote.attributes = 
attribute type {("attention" | "caution" | "danger" | "fastpath" | "important" | "note" | "notice" | "other" | "remember" | "restriction" | "tip" | "warning" | "-dita-use-conref-target")}?, 
attribute othertype { text}?, univ-atts, 
attribute outputclass { text}?
glossScopeNote.element = 
element glossScopeNote {glossScopeNote.attlist, glossScopeNote.content}
glossScopeNote.attlist &= glossScopeNote.attributes
glossSymbol.content = alt?, longdescref?
glossSymbol.attributes = 
attribute href { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, 
attribute keyref { text}?, 
attribute longdescref { text}?, 
attribute height { xsd:NMTOKEN}?, 
attribute width { xsd:NMTOKEN}?, 
attribute align { text}?, 
attribute scale { xsd:NMTOKEN}?, 
attribute scalefit {("yes" | "no" | "-dita-use-conref-target")}?, 
attribute placement {("break" | "inline" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
glossSymbol.element = 
element glossSymbol {glossSymbol.attlist, glossSymbol.content}
glossSymbol.attlist &= glossSymbol.attributes
glossAlt.content = (glossAbbreviation | glossAcronym | glossShortForm | glossSynonym)?, glossStatus?, glossProperty*, glossUsage?, note*, glossAlternateFor*
glossAlt.attributes = univ-atts, 
attribute outputclass { text}?
glossAlt.element = 
element glossAlt {glossAlt.attlist, glossAlt.content}
glossAlt.attlist &= glossAlt.attributes
glossAlternateFor.content =  empty 
glossAlternateFor.attributes = 
attribute href { text}?, 
attribute keyref { text}?, 
attribute type { text}?, 
attribute format { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
glossAlternateFor.element = 
element glossAlternateFor {glossAlternateFor.attlist, glossAlternateFor.content}
glossAlternateFor.attlist &= glossAlternateFor.attributes
glossentry.attlist &= global-atts, 
attribute class { text}?
glossterm.attlist &= global-atts, 
attribute class { text}?
glossdef.attlist &= global-atts, 
attribute class { text}?
glossBody.attlist &= global-atts, 
attribute class { text}?
glossAbbreviation.attlist &= global-atts, 
attribute class { text}?
glossAcronym.attlist &= global-atts, 
attribute class { text}?
glossShortForm.attlist &= global-atts, 
attribute class { text}?
glossSynonym.attlist &= global-atts, 
attribute class { text}?
glossPartOfSpeech.attlist &= global-atts, 
attribute class { text}?
glossProperty.attlist &= global-atts, 
attribute class { text}?
glossStatus.attlist &= global-atts, 
attribute class { text}?
glossAlt.attlist &= global-atts, 
attribute class { text}?
glossAlternateFor.attlist &= global-atts, 
attribute class { text}?
glossScopeNote.attlist &= global-atts, 
attribute class { text}?
glossSurfaceForm.attlist &= global-atts, 
attribute class { text}?
glossSymbol.attlist &= global-atts, 
attribute class { text}?
glossUsage.attlist &= global-atts, 
attribute class { text}?