# 
# =============================================================
#                    HEADER                                    
# =============================================================
#  MODULE:    DITA Common Elements                             
#  VERSION:   1.2                                              
#  DATE:      November 2009                                    
#                                                              
# =============================================================
# 
# =============================================================
#                    PUBLIC DOCUMENT TYPE DEFINITION           
#                    TYPICAL INVOCATION                        
#                                                              
#  Refer to this file by the following public identifier or an 
#       appropriate system identifier 
# PUBLIC "-//OASIS//ELEMENTS DITA Common Elements//EN"
#       Delivered as file "commonElements.mod"                      
# 
# =============================================================
# SYSTEM:     Darwin Information Typing Architecture (DITA)    
#                                                              
# PURPOSE:    Declaring the elements and specialization        
#             attributes for content elements used in both     
#             topics and maps.                                 
#                                                              
# ORIGINAL CREATION DATE:                                      
#             June 2006                                        
#                                                              
#             (C) Copyright OASIS Open 2005, 2009.             
#             (C) Copyright IBM Corporation 2001, 2004.        
#             All Rights Reserved.                             
#                                                              
#  UPDATES:                                                    
#    2006.06.06 RDA: Add data element                          
#    2006.06.07 RDA: Add @scale to image                       
#    2006.06.07 RDA: Add index-base element                    
#    2006.06.07 RDA: Make universal attributes universal       
#                      (DITA 1.1 proposal #12)                 
#    2006.06.07 RDA: Add unknown element                       
#    2006.06.14 RDA: Add dir attribute to localization-atts    
#    2006.11.30 RDA: Add -dita-use-conref-target to enumerated 
#                      attributes                              
#    2007.12.01 EK:  Reformatted DTD modules for DITA 1.2       
#    2008.01.28 RDA: Add draft-comment to shortdesc            
#    2008.01.28 RDA: Remove enumeration for @disposition on    
#                    draft-comment                             
#    2008.01.29 RDA: Extend content of figgroup                
#    2008.01.30 RDA: Add %conref-atts; and @conaction          
#    2008.02.01 RDA: Added keyref to data, data-about          
#                    Added conkeyref attr to conref attr entity
#    2008.02.12 RDA: Added text element, added to keyword, tm, 
#                    term, ph. Added ph to alt.                
#    2008.02.12 RDA: Added longdescref; add to image, object   
#    2008.02.12 RDA: Modify imbeds to use specific 1.2 version 
#    2008.02.12 RDA: Move navtitle decl. here from topic.mod   
#    2008.02.13 RDA: Create .content and .attributes entities  
#    2008.11.10 RDA: Make href optional on image               
# =============================================================     
#  
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace dita = "http://dita.oasis-open.org/architecture/2005/"

alt = alt.element
boolean = boolean.element
cite = cite.element
data = data.element
data-about = data-about.element
dd = dd.element
ddhd = ddhd.element
desc = desc.element
\div = div.element
dl = dl.element
dlentry = dlentry.element
dlhead = dlhead.element
draft-comment = draft-comment.element
dt = dt.element
dthd = dthd.element
fig = fig.element
figgroup = figgroup.element
fn = fn.element
foreign = foreign.element
image = image.element
indexterm = indexterm.element
index-base = index-base.element
indextermref = indextermref.element
itemgroup = itemgroup.element
keyword = keyword.element
li = li.element
lines = lines.element
longdescref = longdescref.element
longquoteref = longquoteref.element
lq = lq.element
navtitle = navtitle.element
note = note.element
object = object.element
ol = ol.element
p = p.element
param = param.element
ph = ph.element
pre = pre.element
q = q.element
required-cleanup = required-cleanup.element
sl = sl.element
sli = sli.element
simpletable = simpletable.element
state = state.element
stentry = stentry.element
sthead = sthead.element
strow = strow.element
term = term.element
\text = text.element
title = title.element
tm = tm.element
ul = ul.element
unknown = unknown.element
xref = xref.element
table = table.element
colspec = colspec.element
entry = entry.element
row = row.element
tbody = tbody.element
tgroup = tgroup.element
thead = thead.element
audience = audience.element
author = author.element
brand = brand.element
category = category.element
component = component.element
copyrholder = copyrholder.element
copyright = copyright.element
copyryear = copyryear.element
created = created.element
critdates = critdates.element
featnum = featnum.element
keywords = keywords.element
metadata = metadata.element
othermeta = othermeta.element
permissions = permissions.element
platform = platform.element
prodinfo = prodinfo.element
prodname = prodname.element
prognum = prognum.element
publisher = publisher.element
resourceid = resourceid.element
revised = revised.element
series = series.element
source = source.element
vrm = vrm.element
vrmlist = vrmlist.element
basic.ph = (boolean | cite | keyword | ph | q | term | \text | tm | xref | state)
basic.block = (dl | \div | fig | image | lines | lq | note | object | ol | p | pre | simpletable | sl | table | ul)
basic.phandblock = (basic.block | basic.ph)
basic.ph.noxref.nocite = (boolean | keyword | ph | q | term | \text | tm | state)
basic.ph.noxref = (basic.ph.noxref.nocite | cite)
basic.ph.notm = (boolean | cite | keyword | ph | q | term | \text | xref | state)
basic.block.notbl = (dl | \div | fig | image | lines | lq | note | object | ol | p | pre | sl | ul)
basic.block.nonote = (dl | \div | fig | image | lines | lq | object | ol | p | pre | simpletable | sl | table | ul)
basic.block.nopara = (dl | \div | fig | image | lines | lq | note | object | ol | pre | simpletable | sl | table | ul)
basic.block.nolq = (dl | \div | fig | image | lines | note | object | ol | p | pre | simpletable | sl | table | ul)
basic.block.notbnofg = (dl | \div | image | lines | lq | note | object | ol | p | pre | sl | ul)
basic.block.notbfgobj = (dl | \div | image | lines | lq | note | ol | p | pre | sl | ul)
txt.incl = (draft-comment | fn | indextermref | indexterm | required-cleanup)
data.elements.incl = (data | data-about)
foreign.unknown.incl = (foreign | unknown)
listitem.cnt = ( text  | basic.block | basic.ph | data.elements.incl | foreign.unknown.incl | itemgroup | txt.incl)
itemgroup.cnt = ( text  | basic.block | basic.ph | data.elements.incl | foreign.unknown.incl | txt.incl)
title.cnt = ( text  | basic.ph.noxref | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup | image)
xreftext.cnt = ( text  | basic.ph.noxref | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup | image)
xrefph.cnt = ( text  | basic.ph.noxref.nocite | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup)
shortquote.cnt = ( text  | basic.ph | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup)
para.cnt = ( text  | basic.block.nopara | basic.ph | data.elements.incl | foreign.unknown.incl | txt.incl)
note.cnt = ( text  | basic.block.nonote | basic.ph | data.elements.incl | foreign.unknown.incl | txt.incl)
longquote.cnt = ( text  | basic.block.nolq | basic.ph | data.elements.incl | foreign.unknown.incl | longquoteref | txt.incl)
tblcell.cnt = ( text  | basic.block.notbl | basic.ph | data.elements.incl | foreign.unknown.incl | txt.incl)
desc.cnt = ( text  | basic.block.notbfgobj | basic.ph | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup)
ph.cnt = ( text  | basic.ph | data.elements.incl | foreign.unknown.incl | image | txt.incl)
fn.cnt = ( text  | basic.block.notbl | basic.ph | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup)
term.cnt = ( text  | basic.ph | data.elements.incl | draft-comment | foreign.unknown.incl | required-cleanup | image)
defn.cnt = ( text  | basic.block | basic.ph | data.elements.incl | foreign.unknown.incl | itemgroup | txt.incl)
pre.cnt = ( text  | basic.ph | data.elements.incl | foreign.unknown.incl | txt.incl)
fig.cnt = (basic.block.notbnofg | data.elements.incl | fn | foreign.unknown.incl | simpletable | xref)
figgroup.cnt = (basic.block.notbnofg | basic.ph | data.elements.incl | draft-comment | fn | foreign.unknown.incl | required-cleanup)
words.cnt = ( text  | data.elements.incl | foreign.unknown.incl | keyword | term | \text)
data.cnt = ( text  | basic.ph | data.elements.incl | draft-comment | foreign.unknown.incl | image | object | required-cleanup | title)
div.cnt = ( text  | basic.block | basic.ph | data.elements.incl | foreign.unknown.incl | txt.incl)
idElements =  empty 
display-atts = 
attribute scale {("50" | "60" | "70" | "80" | "90" | "100" | "110" | "120" | "140" | "160" | "180" | "200" | "-dita-use-conref-target")}?, 
attribute frame {("all" | "bottom" | "none" | "sides" | "top" | "topbot" | "-dita-use-conref-target")}?, 
attribute expanse {("column" | "page" | "spread" | "textline" | "-dita-use-conref-target")}?
props-attribute-extensions =  empty 
base-attribute-extensions =  empty 
filter-atts = 
attribute props { text}?, 
attribute platform { text}?, 
attribute product { text}?, 
attribute audience { text}?, 
attribute otherprops { text}?, props-attribute-extensions
select-atts = filter-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute importance {("default" | "deprecated" | "high" | "low" | "normal" | "obsolete" | "optional" | "recommended" | "required" | "urgent" | "-dita-use-conref-target")}?, 
attribute rev { text}?, 
attribute status {("changed" | "deleted" | "new" | "unchanged" | "-dita-use-conref-target")}?
conref-atts = 
attribute conref { text}?, 
attribute conrefend { text}?, 
attribute conaction {("mark" | "pushafter" | "pushbefore" | "pushreplace" | "-dita-use-conref-target")}?, 
attribute conkeyref { text}?
id-atts = 
attribute id { xsd:NMTOKEN}?, conref-atts
localization-atts = 
attribute translate {("no" | "yes" | "-dita-use-conref-target")}?, 
attribute xml:lang { text}?, 
attribute dir {("lro" | "ltr" | "rlo" | "rtl" | "-dita-use-conref-target")}?
localization-atts-translate-no = 
attribute translate {("no" | "yes" | "-dita-use-conref-target")}?, 
attribute xml:lang { text}?, 
attribute dir {("lro" | "ltr" | "rlo" | "rtl" | "-dita-use-conref-target")}?
univ-atts = id-atts, select-atts, localization-atts
univ-atts-translate-no = id-atts, select-atts, localization-atts-translate-no
global-atts = 
attribute xtrc { text}?, 
attribute xtrf { text}?
data-about.content = data, (data | data-about)*
data-about.attributes = univ-atts, 
attribute href { text}?, 
attribute keyref { text}?, 
attribute format { text}?, 
attribute type { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, 
attribute outputclass { text}?
data-about.element = 
element data-about {data-about.attlist, data-about.content}
data-about.attlist &= data-about.attributes
data-element-atts = univ-atts, 
attribute name { text}?, 
attribute datatype { text}?, 
attribute value { text}?, 
attribute href { text}?, 
attribute keyref { text}?, 
attribute format { text}?, 
attribute type { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, 
attribute outputclass { text}?
data.content = data.cnt*
data.attributes = data-element-atts
data.element = 
element data {data.attlist, data.content}
data.attlist &= data.attributes
unknown.content = any
unknown.attributes = univ-atts, 
attribute outputclass { text}?
unknown.element = 
element unknown {unknown.attlist, unknown.content}
unknown.attlist &= unknown.attributes
foreign.content = any
foreign.attributes = univ-atts, 
attribute outputclass { text}?
foreign.element = 
element foreign {foreign.attlist, foreign.content}
foreign.attlist &= foreign.attributes
title.content = title.cnt*
title.attributes = id-atts, localization-atts, 
attribute base { text}?, base-attribute-extensions, 
attribute outputclass { text}?, 
attribute rev { text}?
title.element = 
element title {title.attlist, title.content}
title.attlist &= title.attributes
navtitle.content = (words.cnt | ph | draft-comment | required-cleanup)*
navtitle.attributes = univ-atts
navtitle.element = 
element navtitle {navtitle.attlist, navtitle.content}
navtitle.attlist &= navtitle.attributes
desc.content = desc.cnt*
desc.attributes = univ-atts, 
attribute outputclass { text}?
desc.element = 
element desc {desc.attlist, desc.content}
desc.attlist &= desc.attributes
p.content = para.cnt*
p.attributes = univ-atts, 
attribute outputclass { text}?
p.element = 
element p {p.attlist, p.content}
p.attlist &= p.attributes
note.content = note.cnt*
note.attributes = 
attribute type {("attention" | "caution" | "danger" | "fastpath" | "important" | "note" | "notice" | "other" | "remember" | "restriction" | "tip" | "trouble" | "warning" | "-dita-use-conref-target")}?, 
attribute spectitle { text}?, 
attribute othertype { text}?, univ-atts, 
attribute outputclass { text}?
note.element = 
element note {note.attlist, note.content}
note.attlist &= note.attributes
longquoteref.content =  empty 
longquoteref.attributes = 
attribute href { text}?, 
attribute keyref { text}?, 
attribute type { text}?, 
attribute format { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
longquoteref.element = 
element longquoteref {longquoteref.attlist, longquoteref.content}
longquoteref.attlist &= longquoteref.attributes
lq.content = longquote.cnt*
lq.attributes = 
attribute href { text}?, 
attribute keyref { text}?, 
attribute format { text}?, 
attribute type { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, 
attribute reftitle { text}?, univ-atts, 
attribute outputclass { text}?
lq.element = 
element lq {lq.attlist, lq.content}
lq.attlist &= lq.attributes
q.content = shortquote.cnt*
q.attributes = univ-atts, 
attribute outputclass { text}?
q.element = 
element q {q.attlist, q.content}
q.attlist &= q.attributes
sl.content = (data | data-about)*, sli+
sl.attributes = 
attribute compact {("no" | "yes" | "-dita-use-conref-target")}?, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
sl.element = 
element sl {sl.attlist, sl.content}
sl.attlist &= sl.attributes
sli.content = ph.cnt*
sli.attributes = univ-atts, 
attribute outputclass { text}?
sli.element = 
element sli {sli.attlist, sli.content}
sli.attlist &= sli.attributes
ul.content = (data | data-about)*, li+
ul.attributes = 
attribute compact {("no" | "yes" | "-dita-use-conref-target")}?, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
ul.element = 
element ul {ul.attlist, ul.content}
ul.attlist &= ul.attributes
ol.content = (data | data-about)*, li+
ol.attributes = 
attribute compact {("no" | "yes" | "-dita-use-conref-target")}?, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
ol.element = 
element ol {ol.attlist, ol.content}
ol.attlist &= ol.attributes
li.content = listitem.cnt*
li.attributes = univ-atts, 
attribute outputclass { text}?
li.element = 
element li {li.attlist, li.content}
li.attlist &= li.attributes
itemgroup.content = itemgroup.cnt*
itemgroup.attributes = univ-atts, 
attribute outputclass { text}?
itemgroup.element = 
element itemgroup {itemgroup.attlist, itemgroup.content}
itemgroup.attlist &= itemgroup.attributes
dl.content = (data | data-about)*, dlhead?, dlentry+
dl.attributes = 
attribute compact {("no" | "yes" | "-dita-use-conref-target")}?, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
dl.element = 
element dl {dl.attlist, dl.content}
dl.attlist &= dl.attributes
dlhead.content = dthd?, ddhd?
dlhead.attributes = univ-atts, 
attribute outputclass { text}?
dlhead.element = 
element dlhead {dlhead.attlist, dlhead.content}
dlhead.attlist &= dlhead.attributes
dthd.content = title.cnt*
dthd.attributes = univ-atts, 
attribute outputclass { text}?
dthd.element = 
element dthd {dthd.attlist, dthd.content}
dthd.attlist &= dthd.attributes
ddhd.content = title.cnt*
ddhd.attributes = univ-atts, 
attribute outputclass { text}?
ddhd.element = 
element ddhd {ddhd.attlist, ddhd.content}
ddhd.attlist &= ddhd.attributes
dlentry.content = dt+, dd+
dlentry.attributes = univ-atts, 
attribute outputclass { text}?
dlentry.element = 
element dlentry {dlentry.attlist, dlentry.content}
dlentry.attlist &= dlentry.attributes
dt.content = term.cnt*
dt.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
dt.element = 
element dt {dt.attlist, dt.content}
dt.attlist &= dt.attributes
dd.content = defn.cnt*
dd.attributes = univ-atts, 
attribute outputclass { text}?
dd.element = 
element dd {dd.attlist, dd.content}
dd.attlist &= dd.attributes
fig.content = title?, desc?, (figgroup | fig.cnt)*
fig.attributes = display-atts, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
fig.element = 
element fig {fig.attlist, fig.content}
fig.attlist &= fig.attributes
figgroup.content = title?, (figgroup | figgroup.cnt)*
figgroup.attributes = univ-atts, 
attribute outputclass { text}?
figgroup.element = 
element figgroup {figgroup.attlist, figgroup.content}
figgroup.attlist &= figgroup.attributes
pre.content = pre.cnt*
pre.attributes = display-atts, 
attribute spectitle { text}?, 
attribute xml:space {"preserve"}?, univ-atts, 
attribute outputclass { text}?
pre.element = 
element pre {pre.attlist, pre.content}
pre.attlist &= pre.attributes
lines.content = pre.cnt*
lines.attributes = display-atts, 
attribute spectitle { text}?, 
attribute xml:space {"preserve"}?, univ-atts, 
attribute outputclass { text}?
lines.element = 
element lines {lines.attlist, lines.content}
lines.attlist &= lines.attributes
div.content = div.cnt*
div.attributes = univ-atts, 
attribute outputclass { text}?
div.element = 
element \div {div.attlist, div.content}
div.attlist &= div.attributes
text.content = ( text  | \text)*
text.attributes = univ-atts
text.element = 
element \text {text.attlist, text.content}
text.attlist &= text.attributes
keyword.content = ( text  | draft-comment | required-cleanup | \text | tm)*
keyword.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
keyword.element = 
element keyword {keyword.attlist, keyword.content}
keyword.attlist &= keyword.attributes
term.content = ( text  | draft-comment | required-cleanup | \text | tm)*
term.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
term.element = 
element term {term.attlist, term.content}
term.attlist &= term.attributes
ph.content = (ph.cnt)*
ph.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
ph.element = 
element ph {ph.attlist, ph.content}
ph.attlist &= ph.attributes
tm.content = ( text  | \text | tm)*
tm.attributes = 
attribute trademark { text}?, 
attribute tmowner { text}?, 
attribute tmtype {("reg" | "service" | "tm" | "-dita-use-conref-target")}, 
attribute tmclass { text}?, univ-atts
tm.element = 
element tm {tm.attlist, tm.content}
tm.attlist &= tm.attributes
boolean.content =  empty 
boolean.attributes = 
attribute state {("no" | "yes" | "-dita-use-conref-target")}, univ-atts, 
attribute outputclass { text}?
boolean.element = 
element boolean {boolean.attlist, boolean.content}
boolean.attlist &= boolean.attributes
state.content =  empty 
state.attributes = 
attribute name { text}, 
attribute value { text}, univ-atts, 
attribute outputclass { text}?
state.element = 
element state {state.attlist, state.content}
state.attlist &= state.attributes
image.content = alt?, longdescref?
image.attributes = 
attribute href { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, 
attribute keyref { text}?, 
attribute alt { text}?, 
attribute longdescref { text}?, 
attribute height { xsd:NMTOKEN}?, 
attribute width { xsd:NMTOKEN}?, 
attribute align { text}?, 
attribute scale { xsd:NMTOKEN}?, 
attribute scalefit {("yes" | "no" | "-dita-use-conref-target")}?, 
attribute placement {("break" | "inline" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
image.element = 
element image {image.attlist, image.content}
image.attlist &= image.attributes
alt.content = (words.cnt | draft-comment | required-cleanup | ph)*
alt.attributes = univ-atts, 
attribute outputclass { text}?
alt.element = 
element alt {alt.attlist, alt.content}
alt.attlist &= alt.attributes
longdescref.content =  empty 
longdescref.attributes = 
attribute href { text}?, 
attribute keyref { text}?, 
attribute type { text}?, 
attribute format { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
longdescref.element = 
element longdescref {longdescref.attlist, longdescref.content}
longdescref.attlist &= longdescref.attributes
object.content = desc?, longdescref?, param*, foreign.unknown.incl*
object.attributes = 
attribute declare {("declare")}?, 
attribute classid { text}?, 
attribute classidkeyref { text}?, 
attribute codebase { text}?, 
attribute codebasekeyref { text}?, 
attribute data { text}?, 
attribute datakeyref { text}?, 
attribute type { text}?, 
attribute codetype { text}?, 
attribute archive { text}?, 
attribute archivekeyrefs { text}?, 
attribute standby { text}?, 
attribute height { xsd:NMTOKEN}?, 
attribute width { xsd:NMTOKEN}?, 
attribute usemap { text}?, 
attribute name { text}?, 
attribute tabindex { xsd:NMTOKEN}?, 
attribute longdescref { text}?, univ-atts, 
attribute outputclass { text}?
object.element = 
element object {object.attlist, object.content}
object.attlist &= object.attributes
param.content =  empty 
param.attributes = univ-atts, 
attribute name { text}, 
attribute value { text}?, 
attribute valuetype {("data" | "object" | "ref" | "-dita-use-conref-target")}?, 
attribute type { text}?, 
attribute keyref { text}?
param.element = 
element param {param.attlist, param.content}
param.attlist &= param.attributes
simpletable.content = sthead?, strow+
simpletable.attributes = 
attribute relcolwidth { text}?, 
attribute keycol { xsd:NMTOKEN}?, 
attribute refcols { xsd:NMTOKENS}?, display-atts, 
attribute spectitle { text}?, univ-atts, 
attribute outputclass { text}?
simpletable.element = 
element simpletable {simpletable.attlist, simpletable.content}
simpletable.attlist &= simpletable.attributes
sthead.content = stentry+
sthead.attributes = univ-atts, 
attribute outputclass { text}?
sthead.element = 
element sthead {sthead.attlist, sthead.content}
sthead.attlist &= sthead.attributes
strow.content = stentry*
strow.attributes = univ-atts, 
attribute outputclass { text}?
strow.element = 
element strow {strow.attlist, strow.content}
strow.attlist &= strow.attributes
stentry.content = tblcell.cnt*
stentry.attributes = 
attribute specentry { text}?, univ-atts, 
attribute outputclass { text}?
stentry.element = 
element stentry {stentry.attlist, stentry.content}
stentry.attlist &= stentry.attributes
draft-comment.content = ( text  | basic.phandblock | data.elements.incl | foreign.unknown.incl)*
draft-comment.attributes = 
attribute author { text}?, 
attribute time { text}?, 
attribute disposition { text}?, univ-atts-translate-no, 
attribute outputclass { text}?
draft-comment.element = 
element draft-comment {draft-comment.attlist, draft-comment.content}
draft-comment.attlist &= draft-comment.attributes
required-cleanup.content = any
required-cleanup.attributes = 
attribute remap { text}?, univ-atts-translate-no, 
attribute outputclass { text}?
required-cleanup.element = 
element required-cleanup {required-cleanup.attlist, required-cleanup.content}
required-cleanup.attlist &= required-cleanup.attributes
fn.content = fn.cnt*
fn.attributes = 
attribute callout { text}?, univ-atts, 
attribute outputclass { text}?
fn.element = 
element fn {fn.attlist, fn.content}
fn.attlist &= fn.attributes
indexterm.content = (words.cnt | ph | indexterm | index-base)*
indexterm.attributes = 
attribute keyref { text}?, 
attribute \start { text}?, 
attribute end { text}?, univ-atts
indexterm.element = 
element indexterm {indexterm.attlist, indexterm.content}
indexterm.attlist &= indexterm.attributes
index-base.content = (words.cnt | indexterm)*
index-base.attributes = 
attribute keyref { text}?, univ-atts
index-base.element = 
element index-base {index-base.attlist, index-base.content}
index-base.attlist &= index-base.attributes
indextermref.content =  empty 
indextermref.attributes = 
attribute keyref { text}, univ-atts
indextermref.element = 
element indextermref {indextermref.attlist, indextermref.content}
indextermref.attlist &= indextermref.attributes
cite.content = xrefph.cnt*
cite.attributes = 
attribute keyref { text}?, univ-atts, 
attribute outputclass { text}?
cite.element = 
element cite {cite.attlist, cite.content}
cite.attlist &= cite.attributes
xref.content = (xreftext.cnt | desc)*
xref.attributes = 
attribute href { text}?, 
attribute keyref { text}?, 
attribute type { text}?, 
attribute format { text}?, 
attribute scope {("external" | "local" | "peer" | "-dita-use-conref-target")}?, univ-atts, 
attribute outputclass { text}?
xref.element = 
element xref {xref.attlist, xref.content}
xref.attlist &= xref.attributes
include "tblDeclMod.rnc"
alt.attlist &= global-atts, 
attribute class { text}?
boolean.attlist &= global-atts, 
attribute class { text}?
cite.attlist &= global-atts, 
attribute class { text}?
dd.attlist &= global-atts, 
attribute class { text}?
data.attlist &= global-atts, 
attribute class { text}?
data-about.attlist &= global-atts, 
attribute class { text}?
ddhd.attlist &= global-atts, 
attribute class { text}?
desc.attlist &= global-atts, 
attribute class { text}?
div.attlist &= global-atts, 
attribute class { text}?
dl.attlist &= global-atts, 
attribute class { text}?
dlentry.attlist &= global-atts, 
attribute class { text}?
dlhead.attlist &= global-atts, 
attribute class { text}?
draft-comment.attlist &= global-atts, 
attribute class { text}?
dt.attlist &= global-atts, 
attribute class { text}?
dthd.attlist &= global-atts, 
attribute class { text}?
fig.attlist &= global-atts, 
attribute class { text}?
figgroup.attlist &= global-atts, 
attribute class { text}?
fn.attlist &= global-atts, 
attribute class { text}?
foreign.attlist &= global-atts, 
attribute class { text}?
image.attlist &= global-atts, 
attribute class { text}?
indexterm.attlist &= global-atts, 
attribute class { text}?
index-base.attlist &= global-atts, 
attribute class { text}?
indextermref.attlist &= global-atts, 
attribute class { text}?
itemgroup.attlist &= global-atts, 
attribute class { text}?
keyword.attlist &= global-atts, 
attribute class { text}?
li.attlist &= global-atts, 
attribute class { text}?
lines.attlist &= global-atts, 
attribute class { text}?
longdescref.attlist &= global-atts, 
attribute class { text}?
longquoteref.attlist &= global-atts, 
attribute class { text}?
lq.attlist &= global-atts, 
attribute class { text}?
navtitle.attlist &= global-atts, 
attribute class { text}?
note.attlist &= global-atts, 
attribute class { text}?
object.attlist &= global-atts, 
attribute class { text}?
ol.attlist &= global-atts, 
attribute class { text}?
p.attlist &= global-atts, 
attribute class { text}?
param.attlist &= global-atts, 
attribute class { text}?
ph.attlist &= global-atts, 
attribute class { text}?
pre.attlist &= global-atts, 
attribute class { text}?
q.attlist &= global-atts, 
attribute class { text}?
required-cleanup.attlist &= global-atts, 
attribute class { text}?
simpletable.attlist &= global-atts, 
attribute class { text}?
sl.attlist &= global-atts, 
attribute class { text}?
sli.attlist &= global-atts, 
attribute class { text}?
state.attlist &= global-atts, 
attribute class { text}?
stentry.attlist &= global-atts, 
attribute class { text}?
sthead.attlist &= global-atts, 
attribute class { text}?
strow.attlist &= global-atts, 
attribute class { text}?
term.attlist &= global-atts, 
attribute class { text}?
text.attlist &= global-atts, 
attribute class { text}?
title.attlist &= global-atts, 
attribute class { text}?
tm.attlist &= global-atts, 
attribute class { text}?
ul.attlist &= global-atts, 
attribute class { text}?
unknown.attlist &= global-atts, 
attribute class { text}?
xref.attlist &= global-atts, 
attribute class { text}?